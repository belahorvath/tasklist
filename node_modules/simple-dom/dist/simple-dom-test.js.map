{"version":3,"file":"simple-dom-test.js","sources":["../test/document-test.js","../test/element-test.js","../test/node-test.js","../test/support.js","../test/parser-test.js","../test/serializer-test.js"],"sourcesContent":["import { Document } from 'simple-dom';\n\nQUnit.module('Document');\n\nQUnit.test(\"creating a document node\", function(assert) {\n  var document = new Document();\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\n  assert.strictEqual(document.nodeType, 9, \"document has node type of 9\");\n  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName\n  assert.strictEqual(document.nodeName, \"#document\", \"document node has the name #document\");\n  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue\n  assert.strictEqual(document.nodeValue, null, \"for the document itself, nodeValue returns null\");\n});\n","import { Document, HTMLSerializer as Serializer, voidMap } from 'simple-dom';\n\nQUnit.module('Element');\n\n// See http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-core.html#ID-B63ED1A3\nQUnit.test(\"appending a document fragment appends the fragment's children and not the fragment itself\", function(assert) {\n  var document = new Document();\n\n  var frag = document.createDocumentFragment();\n  var elem = document.createElement('div');\n  var body = document.body;\n\n  assert.strictEqual(body.firstChild, null, \"body has no children\");\n\n  frag.appendChild(elem);\n  body.appendChild(frag);\n\n  assert.strictEqual(body.firstChild.tagName, \"DIV\", \"fragment's child is added as child of document\");\n});\n\n// See http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-core.html#ID-B63ED1A3\nQUnit.test(\"appending a document fragment (via insertBefore) appends the fragment's children and not the fragment itself\", function(assert) {\n  var document = new Document();\n\n  var frag = document.createDocumentFragment();\n  var elem = document.createElement('div');\n  var existing = document.createElement('main');\n  var body = document.body;\n  body.appendChild(existing);\n\n  assert.strictEqual(body.firstChild.tagName, \"MAIN\", \"sanity check: the main element was actually inserted\");\n  assert.strictEqual(body.lastChild.tagName, \"MAIN\", \"sanity check: the main element was actually inserted\");\n\n  frag.appendChild(elem);\n  body.insertBefore(frag, existing);\n\n  assert.strictEqual(body.firstChild.tagName, \"DIV\", \"The body's first child is now DIV\");\n  assert.strictEqual(body.lastChild.tagName, \"MAIN\", \"The body's last child is now MAIN\");\n});\n\n// http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-536297177\nQUnit.test(\"child nodes can be access via item()\", function(assert) {\n  var document = new Document();\n\n  var parent = document.createElement('div');\n\n  var child1 = document.createElement('p');\n  var child2 = document.createElement('img');\n\n  assert.strictEqual(parent.childNodes.item(0), null, \"attempting to access an item that doesn't exist returns null\");\n\n  parent.appendChild(child1);\n  parent.appendChild(child2);\n\n  assert.strictEqual(parent.childNodes.item(0), child1);\n  assert.strictEqual(parent.childNodes.item(1), child2);\n  assert.strictEqual(parent.childNodes.item(2), null);\n\n  parent.removeChild(child1);\n  assert.strictEqual(parent.childNodes.item(0), child2);\n  assert.strictEqual(parent.childNodes.item(1), null);\n\n  parent.removeChild(child2);\n\n  assert.strictEqual(parent.childNodes.item(0), null);\n  assert.strictEqual(parent.childNodes.item(1), null);\n});\n\nQUnit.test(\"insertBefore can insert before the last child node\", function(assert) {\n  var document = new Document();\n\n  var parent = document.createElement('div');\n\n  var child1 = document.createElement('p');\n  var child2 = document.createElement('img');\n  var child3 = document.createElement('span');\n\n  parent.appendChild(child1);\n  parent.appendChild(child2);\n\n  parent.insertBefore(child3, child2);\n\n  assert.strictEqual(parent.childNodes.item(1), child3);\n});\n\nQUnit.test(\"insertBefore removes the node from its parent before inserting\", function(assert) {\n  var document = new Document();\n  var body = document.body;\n\n  var parent = document.createElement('div');\n  var child =  document.createElement('span');\n  parent.appendChild(child);\n  body.appendChild(parent);\n\n  assert.strictEqual(parent.firstChild, child, 'precond - parent.firstChild === child');\n  assert.strictEqual(parent.lastChild, child, 'precond - parent.lastChild === child');\n  assert.strictEqual(body.firstChild, parent, 'precond - body.firstChild === parent');\n\n  document.body.insertBefore(child, body.firstChild);\n\n  assert.strictEqual(body.firstChild, child, 'body firstChild replaced with child');\n  assert.strictEqual(child.parentNode, body, 'child parentNode updated to body');\n  assert.strictEqual(parent.firstChild, null, 'child removed from parent (firstChild)');\n  assert.strictEqual(parent.lastChild, null, 'child removed from parent (lastChild)');\n});\n\nQUnit.test(\"cloneNode(true) recursively clones nodes\", function(assert) {\n  var document = new Document();\n  var parent = document.createElement('div');\n\n  var child1 = document.createElement('p');\n  var child2 = document.createElement('img');\n  child2.setAttribute('src', 'hamster.png');\n  var child3 = document.createElement('span');\n\n  parent.appendChild(child1);\n  parent.appendChild(child2);\n  parent.appendChild(child3);\n\n  var child11 = document.createTextNode('hello');\n  var child12 = document.createElement('span');\n  child12.appendChild(document.createTextNode(' world'));\n  var child13 = document.createTextNode('!');\n\n  child1.appendChild(child11);\n  child1.appendChild(child12);\n  child1.appendChild(child13);\n\n  var clone = parent.cloneNode(true);\n\n  assert.notEqual(parent.firstChild, null);\n  assert.notStrictEqual(clone.firstChild, parent.firstChild);\n\n  var clone2 = parent.cloneNode(true);\n\n  assert.notEqual(parent.firstChild, null);\n  assert.notStrictEqual(clone2.firstChild, clone.firstChild);\n  assert.notStrictEqual(clone2.firstChild, parent.firstChild);\n\n  var fragment = document.createDocumentFragment();\n  fragment.appendChild(clone);\n\n  var actual = new Serializer(voidMap).serialize(fragment);\n\n  assert.equal(actual, '<div><p>hello<span> world</span>!</p><img src=\"hamster.png\"><span></span></div>');\n});\n\nQUnit.test(\"head + metatags\", function(assert) {\n  var document = new Document();\n\n  var meta = document.createElement('meta');\n  meta.setAttribute('name', 'description');\n  meta.setAttribute('content', 'something here');\n\n  var head = document.head;\n  head.appendChild(meta);\n\n  var actual = new Serializer(voidMap).serialize(head.firstChild);\n\n  assert.strictEqual(head.firstChild.tagName, \"META\", \"sanity check: the meta element was actually inserted\");\n  assert.equal(actual, '<meta name=\"description\" content=\"something here\">');\n});\n\nQUnit.test(\"setAttribute converts non strings\", function (assert) {\n  var document = new Document();\n\n  var div = document.createElement('div');\n  div.setAttribute('a', 0);\n  assert.strictEqual(div.getAttribute('a'), '0');\n  div.setAttribute('a', 1);\n  assert.strictEqual(div.getAttribute('a'), '1');\n  div.setAttribute('a', null);\n  assert.strictEqual(div.getAttribute('a'), 'null');\n  div.setAttribute('a', undefined);\n  assert.strictEqual(div.getAttribute('a'), 'undefined');\n  div.setAttribute('a', true);\n  assert.strictEqual(div.getAttribute('a'), 'true');\n  div.setAttribute('a', false);\n  assert.strictEqual(div.getAttribute('a'), 'false');\n});\n","import { Node } from 'simple-dom';\n\nQUnit.module('Node');\n\nQUnit.test(\"#insertBefore\", function(assert) {\n  var body = new Node(1, 'body');\n  var div = new Node(1, 'div');\n  var span = new Node(1, 'span');\n  var ul = new Node(1, 'ul');\n  span.previousSibling = new Node(1, 'p');\n  var appendChildReturn = body.appendChild(div);\n\n  assert.strictEqual(appendChildReturn, div, 'appendChild should return the node it is appending');\n\n  body.insertBefore(span, div);\n  assert.strictEqual(span.parentNode, body, \"nodes parent is set\");\n  assert.strictEqual(span.previousSibling, null, \"nodes previous sibling is cleared\");\n  assert.strictEqual(span.nextSibling, div, \"nodes next sibling is set\");\n  assert.strictEqual(div.previousSibling, span, \"next sibling's previous sibling is set\");\n  assert.strictEqual(div.nextSibling, null, \"next sibling's next sibling is set\");\n  assert.strictEqual(div.parentNode, body, \"next sibling's parent is set\");\n  assert.strictEqual(body.firstChild, span, \"parents first child is set\");\n  assert.strictEqual(body.lastChild, div, \"parents last child is set\");\n});\n","import { Document } from 'simple-dom';\n\nexport var document = (function (){\n  if (typeof window !== 'undefined' && window.document) {\n    return window.document;\n  }\n  return new Document();\n}());\n\nexport function element(tagName, attrs) {\n  var el = document.createElement(tagName);\n  for (var key in attrs) {\n    el.setAttribute(key, attrs[key]);\n  }\n  for (var i=2; i<arguments.length; i++) {\n    el.appendChild(arguments[i]);\n  }\n  return el;\n}\n\nexport function fragment() {\n  var frag = document.createDocumentFragment();\n  for (var i=0; i<arguments.length; i++) {\n    frag.appendChild(arguments[i]);\n  }\n  return frag;\n}\n\nexport function text(s) {\n  return document.createTextNode(s);\n}\n\nexport function comment(s) {\n  return document.createComment(s);\n}\n\nexport function html(s) {\n  return document.createRawHTMLSection(s);\n}\n","import { document } from './support';\n\nimport { HTMLParser as Parser, voidMap } from 'simple-dom';\nimport { tokenize } from 'simple-html-tokenizer';\n\nQUnit.module('Basic HTML parsing', {\n  beforeEach: function() {\n    this.parser = new Parser(tokenize, document, voidMap);\n  }\n});\n\nQUnit.test('simple parse', function (assert) {\n  var fragment = this.parser.parse('<div>Hello</div>');\n  assert.ok(fragment);\n\n  var node = fragment.firstChild;\n  assert.ok(node);\n  assert.equal(node.nodeType, 1);\n  assert.equal(node.nodeName.toLowerCase(), 'div');\n  assert.ok(node.firstChild);\n  assert.equal(node.firstChild.nodeType, 3);\n  assert.equal(node.firstChild.nodeValue, 'Hello');\n});\n\nQUnit.test('nested parse', function (assert) {\n  var fragment = this.parser.parse('text before<div>Hello</div>text between<div id=foo title=\"Hello World\">World</div>text after');\n  assert.ok(fragment);\n\n  var node = fragment.firstChild;\n  assert.ok(node);\n  assert.equal(node.nodeType, 3);\n  assert.equal(node.nodeValue, 'text before');\n\n  node = node.nextSibling;\n  assert.ok(node);\n  assert.equal(node.nodeType, 1);\n  assert.equal(node.nodeName, 'DIV');\n  assert.ok(node.firstChild);\n  assert.equal(node.firstChild.nodeType, 3);\n  assert.equal(node.firstChild.nodeValue, 'Hello');\n\n  node = node.nextSibling;\n  assert.ok(node);\n  assert.equal(node.nodeType, 3);\n  assert.equal(node.nodeValue, 'text between');\n\n  node = node.nextSibling;\n  assert.ok(node);\n  assert.equal(node.nodeType, 1);\n  assert.equal(node.nodeName, 'DIV');\n  var expectedValues = {\n    id: 'foo',\n    title: 'Hello World'\n  };\n  assert.equal(node.attributes.length, 2);\n  assert.equal(node.attributes[0].value, expectedValues[node.attributes[0].name]);\n  assert.equal(node.attributes[1].value, expectedValues[node.attributes[1].name]);\n  assert.equal(node.attributes.length, 2);\n  assert.ok(node.firstChild);\n  assert.equal(node.firstChild.nodeType, 3);\n  assert.equal(node.firstChild.nodeValue, 'World');\n\n  node = node.nextSibling;\n  assert.ok(node);\n  assert.equal(node.nodeType, 3);\n  assert.equal(node.nodeValue, 'text after');\n});\n\nQUnit.test('void tags', function (assert) {\n  var fragment = this.parser.parse('<div>Hello<br>World<img src=\"http://example.com/image.png\"></div>');\n  assert.ok(fragment);\n  var node = fragment.firstChild;\n  assert.ok(node);\n  assert.equal(node.nodeType, 1);\n  assert.equal(node.nodeName, 'DIV');\n  node = node.firstChild;\n  assert.ok(node);\n  assert.equal(node.nodeType, 3);\n  assert.equal(node.nodeValue, 'Hello');\n  node = node.nextSibling;\n  assert.ok(node);\n  assert.equal(node.nodeType, 1);\n  assert.equal(node.nodeName, 'BR');\n  node = node.nextSibling;\n  assert.ok(node);\n  assert.equal(node.nodeType, 3);\n  assert.equal(node.nodeValue, 'World');\n  node = node.nextSibling;\n  assert.ok(node);\n  assert.equal(node.nodeType, 1);\n  assert.equal(node.nodeName, 'IMG');\n  assert.equal(node.getAttribute('src'), 'http://example.com/image.png');\n  assert.equal(node.nextSibling, null);\n});\n","/*globals window*/\n\nimport { element, fragment, text, html } from './support';\nimport { HTMLSerializer as Serializer, voidMap } from 'simple-dom';\n\nQUnit.module('Serializer', {\n  beforeEach: function() {\n    this.serializer = new Serializer(voidMap);\n  }\n});\n\nQUnit.test('serializes single element correctly', function (assert) {\n  var actual = this.serializer.serialize(element('div'));\n  assert.equal(actual, '<div></div>');\n});\n\nQUnit.test('serializes element with attribute number value correctly', function (assert) {\n  var actual = this.serializer.serialize(element('div', {\"height\": 500}));\n  assert.equal(actual, '<div height=\"500\"></div>');\n});\n\nQUnit.test('serializes single void element correctly', function (assert) {\n  var actual = this.serializer.serialize(element('img', { src: 'foo' }));\n  assert.equal(actual, '<img src=\"foo\">');\n});\n\nQUnit.test('serializes complex tree correctly', function (assert) {\n  var actual = this.serializer.serialize(fragment(\n    element('div', { id: 'foo' },\n      element('b', {},\n        text('Foo & Bar')\n      ),\n      text('!'),\n      element('img', { src: 'foo' })\n    )\n  ));\n  assert.equal(actual, '<div id=\"foo\"><b>Foo &amp; Bar</b>!<img src=\"foo\"></div>');\n});\n\nQUnit.test('does not serialize siblings of an element', function (assert) {\n  var html = element('html');\n  var head = element('head');\n  var body = element('body');\n\n  head.appendChild(element('meta', { content: 'foo' }));\n  head.appendChild(element('meta', { content: 'bar' }));\n\n  html.appendChild(head);\n  html.appendChild(body);\n\n  var actual = this.serializer.serialize(head);\n  assert.equal(actual, '<head><meta content=\"foo\"><meta content=\"bar\"></head>');\n\n  actual = this.serializer.serialize(body);\n  assert.equal(actual, '<body></body>');\n});\n\nQUnit.test('serializes children but not self', function (assert) {\n  var actual = this.serializer.serializeChildren(fragment(\n    element('div', { id: 'foo' },\n      element('b', {},\n        text('Foo & Bar')\n      ),\n      text('!'),\n      element('img', { src: 'foo' })\n    )\n  ).firstChild);\n  assert.equal(actual, '<b>Foo &amp; Bar</b>!<img src=\"foo\">');\n});\n\n\n// SimpleDOM supports an extension of the DOM API that allows inserting strings of\n// unparsed, raw HTML into the document. When the document is subsequently serialized,\n// the raw text of the HTML nodes is inserted into the HTML.\n//\n// This performance optimization allows users of SimpleDOM (like Ember's FastBoot) to insert\n// raw HTML snippets into the final serialized output without requiring a parsing and\n// reserialization round-trip.\nif (typeof window === 'undefined') {\n  QUnit.test('serializes raw HTML', function(assert) {\n    var actual = this.serializer.serialize(fragment(\n      element('div', { id: 'foo' },\n        text('<p></p>')\n      )\n    ));\n\n    assert.equal(actual, '<div id=\"foo\">&lt;p&gt;&lt;/p&gt;</div>');\n\n    actual = this.serializer.serialize(fragment(\n      element('div', { id: 'foo' },\n        html('<p></p>')\n      )\n    ));\n\n    assert.equal(actual, '<div id=\"foo\"><p></p></div>');\n  });\n}\n"],"names":["Serializer","Parser","tokenize","fragment","html"],"mappings":"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"}